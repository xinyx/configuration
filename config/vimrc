vmap <C-c> "+y
nmap <C-v> "+p

"set cursorline

highlight CursorLine guibg=lightgreen ctermbg=lightgreen

syntax on

set guifont=courier:h12

set nocp

set cindent

set ru

set number

set backspace=indent,eol,start

set whichwrap=b,s,<,>,[,]

set sw=4

set ts=4

set et

set lbr

set ai

set nobackup

if (has("gui_running"))
    set wrap
    set guioptions-=b
    colo darkblue
else
    set wrap
    colo ron
endif 
" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif
"取消自动注释
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
":set fo-=r
" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" 我的状态行显示的内容（包括文件类型和解码）  
"set statusline=%F%m%r%h%w\ [format:%{&ff}]\ [type:%Y]\ %{strftime(\"%y/%m/%d-\ %H:%M\")}
"set statusline=[%F]%y%r%m%*%=[L:%l/%L,C:%c][%p%%]
set statusline= 
set statusline+=%f\ " file name 
set statusline+=%h%1*%m%r%w%0* " flag 

set statusline+=[ 
if v:version >= 600 
set statusline+=%{strlen(&ft)?&ft:'none'}, " filetype 
set statusline+=%L, " line sum
set statusline+=%{&fileencoding}, " encoding 
endif 
set statusline+=%{&fileformat}] " file format 
set statusline+=%= " right align 
"set statusline+=%2*0x%-8B\ " current char 
set statusline+=0x%-8B\ " current char 
set statusline+=%-14.(%l,%c%V%)\ %<%P " offset 
if filereadable(expand("$VIM/vimfiles/plugin/vimbuddy.vim")) 
set statusline+=\ %{VimBuddy()} " vim buddy 
endif 
" 总是显示状态行  
set laststatus=2

" 在编辑过程中，在右下角显示光标位置的状态行  
"set ruler  
"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)  

"显示命令  
set showcmd  
" 命令行（在状态行下）的高度，默认为1，这里是2  
set cmdheight=1  

" 启动的时候不显示那个援助索马里儿童的提示  
" 通过使用: commands命令，告诉我们文件的哪一行被改变过  
set report=0
" 不让vim发出讨厌的滴滴声  
set noerrorbells

" 高亮显示匹配的括号  
set showmatch 
" 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）  
set incsearch 

" 自动格式化  
set formatoptions=tcrqn 

"关闭gui中的toolbar
"set guioptions-=T
"set guioptions-=m
"与windows共享剪切板
set clipboard+=unnamed

"不备份文件
set nobackup
setlocal noswapfile
set bufhidden=hide
"增强模式下命令行自动完成操作
set wildmenu

set matchtime=3

set ignorecase smartcase
"tags文件目录
"set tags=D:\javaJDK\src\java.tags
"set tags+=/usr/include/c++/tags
set tags+=/usr/local/include/tags
set tags+=./tags

"让taglist找到ctags
"let Tlist_Ctags_Cmd='E:\gvim\tagslist\ctags.exe'

let Tlist_Show_Menu = 1

"ctags set
set autochdir

set mouse=a

set noexpandtab

set nobackup

set shortmess=atI  
set foldenable
"set foldmethod=syntax
map <ENTER> zf%
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

"omnicppcomplete
map <C-F4> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
set completeopt=menu,menuone
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype  in popup window
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_DefaultNamespaces=["std"]

set nocp
filetype plugin on
hi PmenuSel ctermfg=4 ctermbg=0


:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {<ENTER>}<UP><end><ESC>i<ENTER><RIGHT><ENTER>
":inoremap { {<ENTER>}<UP><end><ENTER>
:inoremap { {}<LEFT>
:inoremap } <c-r>=ClosePair('}')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
"":inoremap " ""<ESC>i
"":inoremap ' ''<ESC>i

function ClosePair(char)
if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
else
return a:char
endif
end
endfunction

set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8

"au BufEnter /home/xinyx/software/Edison/linux-kernel/* setlocal tags+=/home/xinyx/software/Edison/linux-kernel/tags
